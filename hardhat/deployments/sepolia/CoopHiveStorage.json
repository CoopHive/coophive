{
  "address": "0xdcc33871cB32df9d5b294AdD3736ac55C551D37e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum SharedStructs.AgreementState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "DealStateChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "resultsId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "dataId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "instructionCount",
          "type": "uint256"
        }
      ],
      "name": "ResultAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "acceptResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "resultsId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dataId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "instructionCount",
          "type": "uint256"
        }
      ],
      "name": "addResult",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "dealId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "resultsId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "dataId",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "instructionCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.Result",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "agreeJobCreator",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum SharedStructs.AgreementState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "resourceProviderAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jobCreatorAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealCreatedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsSubmittedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsCheckedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationRejectedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutAgreeAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutSubmitResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutJudgeResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutMediateResultsAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.Agreement",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "agreeResourceProvider",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum SharedStructs.AgreementState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "resourceProviderAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jobCreatorAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealCreatedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsSubmittedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsCheckedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationRejectedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutAgreeAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutSubmitResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutJudgeResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutMediateResultsAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.Agreement",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "checkResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableChangeControllerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "solver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "jobCreator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "resourceProvider",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "mediators",
              "type": "address[]"
            }
          ],
          "internalType": "struct SharedStructs.DealMembers",
          "name": "members",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeout",
              "name": "agree",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeout",
              "name": "submitResults",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeout",
              "name": "judgeResults",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeout",
              "name": "mediateResults",
              "type": "tuple"
            }
          ],
          "internalType": "struct SharedStructs.DealTimeouts",
          "name": "timeouts",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "instructionPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentCollateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsCollateralMultiple",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.DealPricing",
          "name": "pricing",
          "type": "tuple"
        }
      ],
      "name": "ensureDeal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "dealId",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "solver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "jobCreator",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "resourceProvider",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "mediators",
                  "type": "address[]"
                }
              ],
              "internalType": "struct SharedStructs.DealMembers",
              "name": "members",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "agree",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "submitResults",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "judgeResults",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "mediateResults",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeouts",
              "name": "timeouts",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "instructionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "paymentCollateral",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "resultsCollateralMultiple",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "mediationFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealPricing",
              "name": "pricing",
              "type": "tuple"
            }
          ],
          "internalType": "struct SharedStructs.Deal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "getAgreement",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum SharedStructs.AgreementState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "resourceProviderAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jobCreatorAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealCreatedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsSubmittedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsCheckedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationRejectedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutAgreeAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutSubmitResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutJudgeResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutMediateResultsAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.Agreement",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getControllerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "getDeal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "dealId",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "solver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "jobCreator",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "resourceProvider",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "mediators",
                  "type": "address[]"
                }
              ],
              "internalType": "struct SharedStructs.DealMembers",
              "name": "members",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "agree",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "submitResults",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "judgeResults",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "mediateResults",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeouts",
              "name": "timeouts",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "instructionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "paymentCollateral",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "resultsCollateralMultiple",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "mediationFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealPricing",
              "name": "pricing",
              "type": "tuple"
            }
          ],
          "internalType": "struct SharedStructs.Deal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "getDealsForParty",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "getJobCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "getResult",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "dealId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "resultsId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "dataId",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "instructionCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.Result",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "getResultsCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "hasDeal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        },
        {
          "internalType": "enum SharedStructs.AgreementState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "isState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "mediationAcceptResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "mediationRejectResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controllerAddress",
          "type": "address"
        }
      ],
      "name": "setControllerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "timeoutAgree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "timeoutJudgeResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "timeoutMediateResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "timeoutSubmitResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3eb96ee38373295ab26007dc9b7569c8a746b212cf946750360e129ca6df086b",
  "receipt": {
    "to": null,
    "from": "0x120a180938845891ee2ae4aA77d60BaB26bf9f70",
    "contractAddress": "0xdcc33871cB32df9d5b294AdD3736ac55C551D37e",
    "transactionIndex": 75,
    "gasUsed": "4657991",
    "logsBloom": "0x
    "blockHash": "0x15365a1a98bce8d0cef1e3108c432588c8b6f6abbc04a13a400e6a7b01fc76a5",
    "transactionHash": "0x3eb96ee38373295ab26007dc9b7569c8a746b212cf946750360e129ca6df086b",
    "logs": [
      {
        "transactionIndex": 75,
        "blockNumber": 5659340,
        "transactionHash": "0x3eb96ee38373295ab26007dc9b7569c8a746b212cf946750360e129ca6df086b",
        "address": "0xdcc33871cB32df9d5b294AdD3736ac55C551D37e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000120a180938845891ee2ae4aa77d60bab26bf9f70"
        ],
        "data": "0x",
        "logIndex": 93,
        "blockHash": "0x15365a1a98bce8d0cef1e3108c432588c8b6f6abbc04a13a400e6a7b01fc76a5"
      }
    ],
    "blockNumber": 5659340,
    "cumulativeGasUsed": "13439081",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4286bdc1be3c06de3f23b5ebaf2251b6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum SharedStructs.AgreementState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"DealStateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"resultsId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dataId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"instructionCount\",\"type\":\"uint256\"}],\"name\":\"ResultAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"acceptResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resultsId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"instructionCount\",\"type\":\"uint256\"}],\"name\":\"addResult\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resultsId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"instructionCount\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.Result\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"agreeJobCreator\",\"outputs\":[{\"components\":[{\"internalType\":\"enum SharedStructs.AgreementState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"resourceProviderAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jobCreatorAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealCreatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsSubmittedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCheckedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationRejectedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutAgreeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutSubmitResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutJudgeResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutMediateResultsAt\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.Agreement\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"agreeResourceProvider\",\"outputs\":[{\"components\":[{\"internalType\":\"enum SharedStructs.AgreementState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"resourceProviderAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jobCreatorAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealCreatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsSubmittedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCheckedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationRejectedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutAgreeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutSubmitResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutJudgeResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutMediateResultsAt\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.Agreement\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"checkResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableChangeControllerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jobCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resourceProvider\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"mediators\",\"type\":\"address[]\"}],\"internalType\":\"struct SharedStructs.DealMembers\",\"name\":\"members\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"agree\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"submitResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"judgeResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"mediateResults\",\"type\":\"tuple\"}],\"internalType\":\"struct SharedStructs.DealTimeouts\",\"name\":\"timeouts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"instructionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCollateralMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationFee\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealPricing\",\"name\":\"pricing\",\"type\":\"tuple\"}],\"name\":\"ensureDeal\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jobCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resourceProvider\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"mediators\",\"type\":\"address[]\"}],\"internalType\":\"struct SharedStructs.DealMembers\",\"name\":\"members\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"agree\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"submitResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"judgeResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"mediateResults\",\"type\":\"tuple\"}],\"internalType\":\"struct SharedStructs.DealTimeouts\",\"name\":\"timeouts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"instructionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCollateralMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationFee\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealPricing\",\"name\":\"pricing\",\"type\":\"tuple\"}],\"internalType\":\"struct SharedStructs.Deal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"getAgreement\",\"outputs\":[{\"components\":[{\"internalType\":\"enum SharedStructs.AgreementState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"resourceProviderAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jobCreatorAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealCreatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsSubmittedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCheckedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationRejectedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutAgreeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutSubmitResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutJudgeResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutMediateResultsAt\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.Agreement\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getControllerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"getDeal\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jobCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resourceProvider\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"mediators\",\"type\":\"address[]\"}],\"internalType\":\"struct SharedStructs.DealMembers\",\"name\":\"members\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"agree\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"submitResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"judgeResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"mediateResults\",\"type\":\"tuple\"}],\"internalType\":\"struct SharedStructs.DealTimeouts\",\"name\":\"timeouts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"instructionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCollateralMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationFee\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealPricing\",\"name\":\"pricing\",\"type\":\"tuple\"}],\"internalType\":\"struct SharedStructs.Deal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"getDealsForParty\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"getJobCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"getResult\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resultsId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"instructionCount\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.Result\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"getResultsCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"hasDeal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"internalType\":\"enum SharedStructs.AgreementState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"isState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"mediationAcceptResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"mediationRejectResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"}],\"name\":\"setControllerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"timeoutAgree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"timeoutJudgeResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"timeoutMediateResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"timeoutSubmitResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptResult(string)\":{\"notice\":\"Judge Results\"},\"getAgreement(string)\":{\"notice\":\"Agreements\"},\"getDeal(string)\":{\"notice\":\"Deals\"},\"getJobCost(string)\":{\"notice\":\"Costings\"},\"getResult(string)\":{\"notice\":\"Post Results\"},\"hasDeal(string)\":{\"notice\":\"Checkers\"},\"initialize()\":{\"notice\":\"Init\"},\"mediationAcceptResult(string)\":{\"notice\":\"Mediati:\"},\"timeoutAgree(string)\":{\"notice\":\"Timeouts\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CoopHiveStorage.sol\":\"CoopHiveStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ControllerOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// as well as being ownable (i.e. our admin wallet)\\n// this contract has a modifier called onlyController\\n// it works the same way as Ownable but only the Owner\\n// can change the controller address so it gives us a way of\\n// re-pointing contracts if needed\\ncontract ControllerOwnable is Ownable {\\n\\n  // the address of the controller that is allowed to call functions\\n  address private controllerAddress;\\n\\n  // used to \\\"freeze\\\" the controller address - even the admin cannot\\n  // change it from this point onwards\\n  bool private canChangeControllerAddress = true;\\n\\n  modifier onlyController() {\\n    _checkControllerAccess();\\n    _;\\n  }\\n\\n  function _checkControllerAccess() internal view virtual returns (bool) {\\n    require(controllerAddress != address(0), \\\"ControllerOwnable: Controller address must be defined\\\");\\n    require(_msgSender() == controllerAddress, \\\"ControllerOwnable: Only the controller can call this method\\\");\\n    return true;\\n  }\\n\\n  function setControllerAddress(address _controllerAddress) public onlyOwner {\\n    require(_controllerAddress != address(0), \\\"ControllerOwnable: Controller address must be defined\\\");\\n    require(canChangeControllerAddress, \\\"ControllerOwnable: canChangeControllerAddress is disabled\\\");\\n    controllerAddress = _controllerAddress;\\n  }\\n\\n  function getControllerAddress() public view returns (address) {\\n    return controllerAddress;\\n  }\\n\\n  function disableChangeControllerAddress() public onlyOwner {\\n    canChangeControllerAddress = false;\\n  }\\n}\\n\",\"keccak256\":\"0xecfd8b0beb12340f51cefee5e121932fa7aee0a41fb7d0233966419d153ef429\",\"license\":\"Apache-2.0\"},\"contracts/CoopHiveStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./SharedStructs.sol\\\";\\nimport \\\"./ControllerOwnable.sol\\\";\\n\\ncontract CoopHiveStorage is ControllerOwnable, Initializable {\\n\\n  // the address that is allowed to be the msg.sender for the payment functions\\n  address private controllerAddress;\\n\\n  // used to cut off upgrades for the remote contract\\n  bool private canChangeControllerAddress = true;\\n\\n  // a map of deal id -> deal\\n  mapping(string => SharedStructs.Deal) private deals;\\n\\n  // a map of party -> dealid[]\\n  mapping(address => string[]) private dealsForParty;\\n\\n  // a map of deal id -> agreement\\n  mapping(string => SharedStructs.Agreement) private agreements;\\n\\n  // a map of deal id -> result\\n  mapping(string => SharedStructs.Result) private results;\\n\\n  // a map of deal id -> result\\n  mapping(string => SharedStructs.Result) private mediations;\\n\\n  event DealStateChange(\\n    string dealId,\\n    SharedStructs.AgreementState state\\n  );\\n\\n  /**\\n   * Init\\n   */\\n\\n  // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\\n  function initialize() public initializer {\\n    \\n  }\\n\\n  /**\\n   * Deals\\n   */\\n\\n  function getDeal(\\n    string memory dealId\\n  ) public view returns (SharedStructs.Deal memory) {\\n    return deals[dealId];\\n  }\\n\\n  function getDealsForParty(\\n    address party\\n  ) public view returns (string[] memory) {\\n    return dealsForParty[party];\\n  }\\n\\n  function checkDealMembers(\\n    SharedStructs.DealMembers memory members\\n  ) private pure {\\n    require(members.resourceProvider != address(0), \\\"RP missing\\\");\\n    require(members.jobCreator != address(0), \\\"JC missing\\\");\\n    require(members.solver != address(0), \\\"Solver missing\\\");\\n    require(members.mediators.length > 0, \\\"Mediators <= 0\\\");\\n    require(members.resourceProvider != members.jobCreator, \\\"RP / JC same\\\");\\n  }\\n\\n  function checkTimeouts(\\n    SharedStructs.DealTimeouts memory timeouts\\n  ) private pure {\\n    // the cost of the agree timeout cannot be > 0 because the whole point is\\n    // one party has not paid anything into the contract is what has timed out\\n    require(timeouts.agree.collateral == 0, \\\"Agree deposit must be 0\\\");\\n    // the same is true of the mediation timeout - it's cost cannot be zero\\n    require(timeouts.mediateResults.collateral == 0, \\\"Mediate deposit must be 0\\\");\\n  }\\n\\n  function compareDealMembers(\\n    SharedStructs.DealMembers memory members1,\\n    SharedStructs.DealMembers memory members2\\n  ) private pure {\\n    require(members1.resourceProvider == members2.resourceProvider, \\\"RP\\\");\\n    require(members1.jobCreator == members2.jobCreator, \\\"JC\\\");\\n    require(members1.solver == members2.solver, \\\"Solver\\\");\\n    require(members1.mediators.length == members2.mediators.length, \\\"Mediators\\\");\\n    for (uint256 i = 0; i < members1.mediators.length; i++) {\\n      require(members1.mediators[i] == members2.mediators[i], \\\"Mediator\\\");\\n    }\\n  }\\n\\n  function compareDealTimeout(\\n    SharedStructs.DealTimeout memory timeout1,\\n    SharedStructs.DealTimeout memory timeout2\\n  ) private pure {\\n    require(timeout1.timeout == timeout2.timeout, \\\"Timeout\\\");\\n    require(timeout1.collateral == timeout2.collateral, \\\"Collateral\\\");\\n  }\\n  \\n  function compareDealTimeouts(\\n    SharedStructs.DealTimeouts memory timeouts1,\\n    SharedStructs.DealTimeouts memory timeouts2\\n  ) private pure {\\n    compareDealTimeout(timeouts1.agree, timeouts2.agree);\\n    compareDealTimeout(timeouts1.submitResults, timeouts2.submitResults);\\n    compareDealTimeout(timeouts1.judgeResults, timeouts2.judgeResults);\\n    compareDealTimeout(timeouts1.mediateResults, timeouts2.mediateResults);\\n  }\\n\\n  function compareDealPricing(\\n    SharedStructs.DealPricing memory pricing1,\\n    SharedStructs.DealPricing memory pricing2\\n  ) private pure {\\n    require(pricing1.instructionPrice == pricing2.instructionPrice, \\\"Price\\\");\\n    require(pricing1.paymentCollateral == pricing2.paymentCollateral, \\\"Payment\\\");\\n    require(pricing1.resultsCollateralMultiple == pricing2.resultsCollateralMultiple, \\\"Results\\\");\\n    require(pricing1.mediationFee == pricing2.mediationFee, \\\"Mediation\\\");\\n  }\\n\\n  function ensureDeal(\\n    string memory dealId,\\n    SharedStructs.DealMembers memory members,\\n    SharedStructs.DealTimeouts memory timeouts,\\n    SharedStructs.DealPricing memory pricing\\n  ) public onlyController returns (SharedStructs.Deal memory) {\\n    require(isState(dealId, SharedStructs.AgreementState.DealNegotiating), \\\"DealNegotiating\\\");\\n    checkDealMembers(members);\\n    checkTimeouts(timeouts);\\n    if(hasDeal(dealId)) {\\n      SharedStructs.Deal memory existingDeal = getDeal(dealId);\\n      compareDealMembers(existingDeal.members, members);\\n      compareDealTimeouts(existingDeal.timeouts, timeouts);\\n      compareDealPricing(existingDeal.pricing, pricing);\\n    }\\n    else {\\n      deals[dealId] = SharedStructs.Deal(\\n        dealId,\\n        members,\\n        timeouts,\\n        pricing\\n      );\\n      dealsForParty[members.resourceProvider].push(dealId);\\n      dealsForParty[members.jobCreator].push(dealId);\\n    }\\n    return deals[dealId];\\n  }\\n\\n  /**\\n   * Agreements\\n   */\\n  \\n  function getAgreement(\\n    string memory dealId\\n  ) public view returns (SharedStructs.Agreement memory) {\\n    return agreements[dealId];\\n  }\\n\\n  function agreeResourceProvider(\\n    string memory dealId\\n  ) public onlyController returns (SharedStructs.Agreement memory) {\\n    require(hasDeal(dealId), \\\"Deal does not exist\\\");\\n    require(agreements[dealId].resourceProviderAgreedAt == 0, \\\"RP has already agreed\\\");\\n    agreements[dealId].resourceProviderAgreedAt = block.timestamp;\\n    _maybeAgreeDeal(dealId);\\n    return agreements[dealId];\\n  }\\n\\n  function agreeJobCreator(\\n    string memory dealId\\n  ) public onlyController returns (SharedStructs.Agreement memory) {\\n    require(hasDeal(dealId), \\\"Deal does not exist\\\");\\n    require(agreements[dealId].jobCreatorAgreedAt == 0, \\\"JC has already agreed\\\");\\n    agreements[dealId].jobCreatorAgreedAt = block.timestamp;\\n    _maybeAgreeDeal(dealId);\\n    return agreements[dealId];\\n  }\\n\\n  /**\\n   * Post Results\\n   */\\n\\n  function getResult(\\n    string memory dealId\\n  ) public view returns (SharedStructs.Result memory) {\\n    return results[dealId];\\n  }\\n\\n  event ResultAdded(string dealId, string resultsId, string dataId, uint256 instructionCount);\\n\\n  function addResult(\\n    string memory dealId,\\n    string memory resultsId,\\n    string memory dataId,\\n    uint256 instructionCount\\n  ) public onlyController returns (SharedStructs.Result memory) {\\n    require(isState(dealId, SharedStructs.AgreementState.DealAgreed), \\\"DealAgreed\\\");\\n    agreements[dealId].resultsSubmittedAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.ResultsSubmitted);\\n    results[dealId] = SharedStructs.Result(\\n      dealId,\\n      resultsId,\\n      dataId,\\n      instructionCount\\n    );\\n\\n    emit ResultAdded(dealId, resultsId, dataId, instructionCount);\\n\\n    return results[dealId];\\n  }\\n\\n  /**\\n   * Judge Results\\n   */\\n\\n  function acceptResult(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \\\"ResultsSubmitted\\\");\\n    agreements[dealId].resultsAcceptedAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.ResultsAccepted);\\n  }\\n\\n  function checkResult(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \\\"ResultsSubmitted\\\");\\n    agreements[dealId].resultsCheckedAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.ResultsChecked);\\n  }\\n\\n  /**\\n   * Mediati:\\n   */\\n\\n  function mediationAcceptResult(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.ResultsChecked), \\\"ResultsChecked\\\");\\n    agreements[dealId].mediationAcceptedAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.MediationAccepted);\\n  }\\n\\n  function mediationRejectResult(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.ResultsChecked), \\\"ResultsChecked\\\");\\n    agreements[dealId].mediationRejectedAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.MediationRejected);\\n  }\\n\\n  /**\\n   * Timeouts\\n   */\\n\\n  // called because one party submitted a deal and the other party\\n  // did not agree in time\\n  function timeoutAgree(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.DealNegotiating), \\\"DealNegotiating\\\");\\n    agreements[dealId].timeoutAgreeAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.TimeoutAgree);\\n  }\\n\\n  // called because the JC waited too long for a result to be submitted\\n  // and wants it's money back\\n  function timeoutSubmitResult(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.DealAgreed), \\\"DealAgreed\\\");\\n    agreements[dealId].timeoutSubmitResultsAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.TimeoutSubmitResults);\\n  }\\n\\n  // called because the RP waited too long for a judgement of it's results\\n  // and wants it's money back\\n  function timeoutJudgeResult(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \\\"ResultsSubmitted\\\");\\n    agreements[dealId].timeoutJudgeResultsAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.TimeoutJudgeResults);\\n  }\\n  // called because the RP or JC waited too long for a mediation of it's results\\n  // and both want their money back\\n  function timeoutMediateResult(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.ResultsChecked), \\\"ResultsChecked\\\");\\n    agreements[dealId].timeoutMediateResultsAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.TimeoutMediateResults);\\n  }\\n\\n  /**\\n   * Costings\\n   */\\n\\n  function getJobCost(\\n    string memory dealId\\n  ) public view returns (uint256) {\\n    return deals[dealId].pricing.instructionPrice * results[dealId].instructionCount;\\n  }\\n\\n  function getResultsCollateral(\\nstring memory dealId\\n  ) public view returns (uint256) {\\n    return deals[dealId].pricing.resultsCollateralMultiple * getJobCost(dealId);\\n  }\\n\\n  /**\\n   * Checkers\\n   */\\n\\n  function hasDeal(\\n    string memory dealId\\n  ) public view returns (bool) {\\n    return  bytes(getDeal(dealId).dealId).length > 0;\\n  }\\n\\n  function isState(\\n    string memory dealId,\\n    SharedStructs.AgreementState state\\n  ) public view returns (bool) {\\n    // if we don't have a deal, we should check against DealNegotiating\\n    // as this is the default state - otherwise it's impossible to check\\n    // for isState('DealNegotiating')\\n    if(!hasDeal(dealId)) {\\n      return state == SharedStructs.AgreementState.DealNegotiating;\\n    }\\n    return agreements[dealId].state == state;\\n  }\\n\\n  /**\\n   * Utils\\n   */\\n\\n  function _maybeAgreeDeal(\\n    string memory dealId\\n  ) private {\\n    if(agreements[dealId].resourceProviderAgreedAt != 0 && agreements[dealId].jobCreatorAgreedAt != 0) {\\n      agreements[dealId].dealAgreedAt = block.timestamp;\\n      _changeAgreementState(dealId, SharedStructs.AgreementState.DealAgreed);\\n    } else {\\n      // this is used so we can know if a party can call an agree timeout trigger\\n      agreements[dealId].dealCreatedAt = block.timestamp;\\n    }\\n  }\\n\\n  function _changeAgreementState(\\n    string memory dealId,\\n    SharedStructs.AgreementState state\\n  ) private {\\n    agreements[dealId].state = state;\\n    emit DealStateChange(dealId, state);\\n  }\\n}\\n\",\"keccak256\":\"0x78baf5a82c8627d5b61dd0399fec64a682558b85fb59377daecb53de0d9625b5\",\"license\":\"Apache-2.0\"},\"contracts/SharedStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nlibrary SharedStructs {\\n\\n  enum ServiceType {\\n    Solver,\\n    Mediator,\\n    ResourceProvider,\\n    JobCreator\\n  }\\n\\n  enum AgreementState {\\n\\n    // the two parties have not yet both agreed to the deal\\n    DealNegotiating,\\n\\n    // both parties have agreed\\n    DealAgreed,\\n\\n    // results have been submitted by the RP\\n    ResultsSubmitted,\\n\\n    // the JC has accepted the results\\n    ResultsAccepted,\\n\\n    // the JC has checked the results\\n    ResultsChecked,\\n\\n    // a mediator has accepted the results\\n    MediationAccepted,\\n\\n    // a mediator has rejected the results\\n    MediationRejected,\\n\\n    // this means the counter-party did not agree to the deal in time\\n    TimeoutAgree,\\n\\n    // this means the RP did not submit results in time\\n    TimeoutSubmitResults,\\n\\n    // this means the JC did not accept or reject results in time\\n    TimeoutJudgeResults,\\n\\n    // this means the mediator did not accept or submit judgement in time\\n    TimeoutMediateResults\\n\\n  }\\n\\n  // we map addresses onto infomation about the user\\n  struct User {\\n    address userAddress;\\n    // the CID of information for this user\\n    string metadataCID;\\n    string url;\\n    ServiceType[] roles;\\n  }\\n\\n  // the various addresses involved in runnig a deal\\n  struct DealMembers {\\n    // the address of the solver service that the RP and JC have agreed to use\\n    address solver;\\n    // the addresses of the RP and JC that have agreed to this deal\\n    address jobCreator;\\n    address resourceProvider;\\n    // the list of mediators that the RP and JC have agreed to use\\n    address[] mediators;\\n  }\\n\\n  // a timeout represents the agreed amount of time and the penalty\\n  // that is applied if the timeout is exceeded  \\n  struct DealTimeout {\\n    uint256 timeout;\\n    uint256 collateral;\\n  }\\n  \\n  // the various forms of timeout a deal can have\\n  struct DealTimeouts { \\n    DealTimeout agree;\\n    DealTimeout submitResults;\\n    DealTimeout judgeResults;\\n    DealTimeout mediateResults;\\n  }\\n\\n  // configure the cost of a deal\\n  struct DealPricing {\\n  // agreed price per instruction\\n    uint256 instructionPrice;\\n\\n    // the collateral that the JC has put up to pay for the job\\n    // the final cost of the job will be deducted from this\\n    uint256 paymentCollateral;\\n\\n    // how much collateral the RP will post to attest it's results are correct\\n    // this is a multiple of the cost of the job which is known at results\\n    // submission time\\n    uint256 resultsCollateralMultiple;\\n\\n    // how much is the JC willing to pay the mediator to resolve disputes\\n    uint256 mediationFee;\\n  }\\n\\n  // a Deal forms the information that is agreed between both parties\\n  // both parties must have called \\\"agree_deal\\\" with the exact\\n  // same parameters before the deal is considered valid\\n  // a Deal is immutable - nothing about it can be updated\\n  struct Deal {\\n    // the CID of the Deal document on IPFS (and directory service)\\n    // this contains the job spec, the job offer and the resource offer\\n    string dealId;\\n\\n    // who is participating in this deal\\n    DealMembers members;\\n    \\n    // the timeout settings for a deal\\n    DealTimeouts timeouts;\\n\\n    // the pricing settings for a deal\\n    DealPricing pricing;    \\n  }\\n\\n  // what the RP submits back once having run the job\\n  // this is also immutable\\n  struct Result {\\n    // the id of the deal that this result is for\\n    string dealId;\\n\\n    // the CID of the results on IPFS (and directory service)\\n    // NOTE - this is not the CID of actual results data rather\\n    // of the JSON object reporting that data\\n    string resultsId;\\n\\n    // this is the actual lower level data CID\\n    string dataId;\\n\\n    // how many instructions were executed by the RP\\n    uint256 instructionCount;\\n  }\\n\\n  // an agreement keeps track of the state of a deal and it's fields can be mutated\\n  struct Agreement {\\n    // the current state of the agreement\\n    AgreementState state;\\n\\n    uint256 resourceProviderAgreedAt;\\n    uint256 jobCreatorAgreedAt;\\n    uint256 dealCreatedAt;\\n    uint256 dealAgreedAt;\\n\\n    uint256 resultsSubmittedAt;\\n    uint256 resultsAcceptedAt;\\n    uint256 resultsCheckedAt;\\n\\n    uint256 mediationAcceptedAt;\\n    uint256 mediationRejectedAt;\\n\\n    uint256 timeoutAgreeAt;\\n    uint256 timeoutSubmitResultsAt;\\n    uint256 timeoutJudgeResultsAt;\\n    uint256 timeoutMediateResultsAt;\\n  }\\n\\n  struct JobOffer {\\n    uint256 id;\\n    \\n    // this is the contract that will be triggered\\n    // once there are some results\\n    address calling_contract;\\n\\n    // this is the address that is paying for the job\\n    // they must have called approve on the token contract\\n    // and granted the solver address the number of tokens\\n    // required\\n    address payee;\\n\\n    // the job spec\\n    string module;\\n    string[] inputs;\\n  }\\n}\\n\",\"keccak256\":\"0x17ae1fe0274d61f5460caee95e214371a378a3e49730e5bdc4833506de99fcb6\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80638224ce5f116100f9578063cdd82d1d11610097578063e850be3711610071578063e850be37146104dc578063ec95b967146104f8578063f2fde38b14610528578063f3d3d44814610544576101a9565b8063cdd82d1d14610460578063e707918014610490578063e7b957d1146104c0576101a9565b8063a4702958116100d3578063a4702958146103d8578063a6370b0e146103e2578063b050e74b14610412578063c57380a214610442576101a9565b80638224ce5f1461036e578063824518aa1461039e5780638da5cb5b146103ba576101a9565b8063498cc70d1161016657806373db5c6a1161014057806373db5c6a146102fc578063795f9abf1461032c57806380ffdfe0146103485780638129fc1c14610364576101a9565b8063498cc70d146102a6578063511a9f68146102d6578063715018a6146102f2576101a9565b806311d5af33146101ae5780632244ad2b146101de578063297f9e551461020e5780633955548e1461022a5780633c4135da1461025a57806346834d1e1461028a575b600080fd5b6101c860048036038101906101c391906131b0565b610560565b6040516101d5919061332f565b60405180910390f35b6101f860048036038101906101f39190613486565b610678565b60405161020591906134ea565b60405180910390f35b61022860048036038101906102239190613486565b610691565b005b610244600480360381019061023f919061353b565b610718565b6040516102519190613676565b60405180910390f35b610274600480360381019061026f9190613486565b610a62565b604051610281919061382f565b60405180910390f35b6102a4600480360381019061029f9190613486565b610c3c565b005b6102c060048036038101906102bb9190613486565b610cc3565b6040516102cd9190613676565b60405180910390f35b6102f060048036038101906102eb9190613486565b610ebb565b005b6102fa610f42565b005b61031660048036038101906103119190613486565b610f56565b604051610323919061385a565b60405180910390f35b61034660048036038101906103419190613486565b610fb0565b005b610362600480360381019061035d9190613486565b611037565b005b61036c6110be565b005b61038860048036038101906103839190613486565b6111f7565b604051610395919061385a565b60405180910390f35b6103b860048036038101906103b39190613486565b611238565b005b6103c26112bf565b6040516103cf9190613884565b60405180910390f35b6103e06112e8565b005b6103fc60048036038101906103f79190613b46565b61130d565b6040516104099190613e4e565b60405180910390f35b61042c60048036038101906104279190613e95565b611a1a565b60405161043991906134ea565b60405180910390f35b61044a611ab6565b6040516104579190613884565b60405180910390f35b61047a60048036038101906104759190613486565b611ae0565b604051610487919061382f565b60405180910390f35b6104aa60048036038101906104a59190613486565b611bd6565b6040516104b79190613e4e565b60405180910390f35b6104da60048036038101906104d59190613486565b611f34565b005b6104f660048036038101906104f19190613486565b611fbb565b005b610512600480360381019061050d9190613486565b612042565b60405161051f919061382f565b60405180910390f35b610542600480360381019061053d91906131b0565b61221c565b005b61055e600480360381019061055991906131b0565b61229f565b005b6060600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561066d5783829060005260206000200180546105e090613f20565b80601f016020809104026020016040519081016040528092919081815260200182805461060c90613f20565b80156106595780601f1061062e57610100808354040283529160200191610659565b820191906000526020600020905b81548152906001019060200180831161063c57829003601f168201915b5050505050815260200190600101906105c1565b505050509050919050565b60008061068483611bd6565b6000015151119050919050565b6106996123a9565b506106a5816002611a1a565b6106e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106db90613fae565b60405180910390fd5b426005826040516106f5919061400a565b9081526020016040518091039020600601819055506107158160036124d9565b50565b610720612ec8565b6107286123a9565b50610734856001611a1a565b610773576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076a9061406d565b60405180910390fd5b42600586604051610784919061400a565b9081526020016040518091039020600501819055506107a48560026124d9565b6040518060800160405280868152602001858152602001848152602001838152506006866040516107d5919061400a565b908152602001604051809103902060008201518160000190816107f89190614239565b50602082015181600101908161080e9190614239565b5060408201518160020190816108249190614239565b50606082015181600301559050507f0ff955ec0ee856bc2600be3542a22fb4e34ce6315759d5a35f4671581583cb16858585856040516108679493929190614344565b60405180910390a160068560405161087f919061400a565b90815260200160405180910390206040518060800160405290816000820180546108a890613f20565b80601f01602080910402602001604051908101604052809291908181526020018280546108d490613f20565b80156109215780601f106108f657610100808354040283529160200191610921565b820191906000526020600020905b81548152906001019060200180831161090457829003601f168201915b5050505050815260200160018201805461093a90613f20565b80601f016020809104026020016040519081016040528092919081815260200182805461096690613f20565b80156109b35780601f10610988576101008083540402835291602001916109b3565b820191906000526020600020905b81548152906001019060200180831161099657829003601f168201915b505050505081526020016002820180546109cc90613f20565b80601f01602080910402602001604051908101604052809291908181526020018280546109f890613f20565b8015610a455780601f10610a1a57610100808354040283529160200191610a45565b820191906000526020600020905b815481529060010190602001808311610a2857829003601f168201915b505050505081526020016003820154815250509050949350505050565b610a6a612ef0565b610a726123a9565b50610a7c82610678565b610abb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab2906143ea565b60405180910390fd5b6000600583604051610acd919061400a565b90815260200160405180910390206002015414610b1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1690614456565b60405180910390fd5b42600583604051610b30919061400a565b908152602001604051809103902060020181905550610b4e8261255f565b600582604051610b5e919061400a565b9081526020016040518091039020604051806101c00160405290816000820160009054906101000a900460ff16600a811115610b9d57610b9c613698565b5b600a811115610baf57610bae613698565b5b8152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d820154815250509050919050565b610c446123a9565b50610c50816002611a1a565b610c8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8690613fae565b60405180910390fd5b42600582604051610ca0919061400a565b908152602001604051809103902060070181905550610cc08160046124d9565b50565b610ccb612ec8565b600682604051610cdb919061400a565b9081526020016040518091039020604051806080016040529081600082018054610d0490613f20565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3090613f20565b8015610d7d5780601f10610d5257610100808354040283529160200191610d7d565b820191906000526020600020905b815481529060010190602001808311610d6057829003601f168201915b50505050508152602001600182018054610d9690613f20565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc290613f20565b8015610e0f5780601f10610de457610100808354040283529160200191610e0f565b820191906000526020600020905b815481529060010190602001808311610df257829003601f168201915b50505050508152602001600282018054610e2890613f20565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5490613f20565b8015610ea15780601f10610e7657610100808354040283529160200191610ea1565b820191906000526020600020905b815481529060010190602001808311610e8457829003601f168201915b505050505081526020016003820154815250509050919050565b610ec36123a9565b50610ecf816001611a1a565b610f0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f059061406d565b60405180910390fd5b42600582604051610f1f919061400a565b9081526020016040518091039020600b0181905550610f3f8160086124d9565b50565b610f4a612618565b610f546000612696565b565b6000600682604051610f68919061400a565b908152602001604051809103902060030154600383604051610f8a919061400a565b9081526020016040518091039020600d0160000154610fa991906144a5565b9050919050565b610fb86123a9565b50610fc4816000611a1a565b611003576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffa90614533565b60405180910390fd5b42600582604051611014919061400a565b9081526020016040518091039020600a01819055506110348160076124d9565b50565b61103f6123a9565b5061104b816004611a1a565b61108a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110819061459f565b60405180910390fd5b4260058260405161109b919061400a565b9081526020016040518091039020600901819055506110bb8160066124d9565b50565b6000600160169054906101000a900460ff161590508080156110f1575060018060159054906101000a900460ff1660ff16105b8061111f57506111003061275a565b15801561111e575060018060159054906101000a900460ff1660ff16145b5b61115e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115590614631565b60405180910390fd5b60018060156101000a81548160ff021916908360ff160217905550801561119a5760018060166101000a81548160ff0219169083151502179055505b80156111f4576000600160166101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516111eb9190614699565b60405180910390a15b50565b600061120282610f56565b600383604051611212919061400a565b9081526020016040518091039020600d016002015461123191906144a5565b9050919050565b6112406123a9565b5061124c816004611a1a565b61128b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112829061459f565b60405180910390fd5b4260058260405161129c919061400a565b9081526020016040518091039020600801819055506112bc8160056124d9565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6112f0612618565b6000600160146101000a81548160ff021916908315150217905550565b611315612f71565b61131d6123a9565b50611329856000611a1a565b611368576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135f90614533565b60405180910390fd5b6113718461277d565b61137a83612997565b61138385610678565b156113c557600061139386611bd6565b90506113a3816020015186612a30565b6113b1816040015185612cb0565b6113bf816060015184612cfc565b506116c1565b6040518060800160405280868152602001858152602001848152602001838152506003866040516113f6919061400a565b908152602001604051809103902060008201518160000190816114199190614239565b5060208201518160010160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019080519060200190611514929190612fab565b505050604082015181600501600082015181600001600082015181600001556020820151816001015550506020820151816002016000820151816000015560208201518160010155505060408201518160040160008201518160000155602082015181600101555050606082015181600601600082015181600001556020820151816001015550505050606082015181600d0160008201518160000155602082015181600101556040820151816002015560608201518160030155505090505060046000856040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020859080600181540180825580915050600190039060005260206000200160009091909190915090816116499190614239565b5060046000856020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020859080600181540180825580915050600190039060005260206000200160009091909190915090816116bf9190614239565b505b6003856040516116d1919061400a565b90815260200160405180910390206040518060800160405290816000820180546116fa90613f20565b80601f016020809104026020016040519081016040528092919081815260200182805461172690613f20565b80156117735780601f1061174857610100808354040283529160200191611773565b820191906000526020600020905b81548152906001019060200180831161175657829003601f168201915b50505050508152602001600182016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180548060200260200160405190810160405280929190818152602001828054801561191357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116118c9575b5050505050815250508152602001600582016040518060800160405290816000820160405180604001604052908160008201548152602001600182015481525050815260200160028201604051806040016040529081600082015481526020016001820154815250508152602001600482016040518060400160405290816000820154815260200160018201548152505081526020016006820160405180604001604052908160008201548152602001600182015481525050815250508152602001600d8201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050815250509050949350505050565b6000611a2583610678565b611a58576000600a811115611a3d57611a3c613698565b5b82600a811115611a5057611a4f613698565b5b149050611ab0565b81600a811115611a6b57611a6a613698565b5b600584604051611a7b919061400a565b908152602001604051809103902060000160009054906101000a900460ff16600a811115611aac57611aab613698565b5b1490505b92915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611ae8612ef0565b600582604051611af8919061400a565b9081526020016040518091039020604051806101c00160405290816000820160009054906101000a900460ff16600a811115611b3757611b36613698565b5b600a811115611b4957611b48613698565b5b8152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d820154815250509050919050565b611bde612f71565b600382604051611bee919061400a565b9081526020016040518091039020604051806080016040529081600082018054611c1790613f20565b80601f0160208091040260200160405190810160405280929190818152602001828054611c4390613f20565b8015611c905780601f10611c6557610100808354040283529160200191611c90565b820191906000526020600020905b815481529060010190602001808311611c7357829003601f168201915b50505050508152602001600182016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805480602002602001604051908101604052809291908181526020018280548015611e3057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611de6575b5050505050815250508152602001600582016040518060800160405290816000820160405180604001604052908160008201548152602001600182015481525050815260200160028201604051806040016040529081600082015481526020016001820154815250508152602001600482016040518060400160405290816000820154815260200160018201548152505081526020016006820160405180604001604052908160008201548152602001600182015481525050815250508152602001600d8201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050815250509050919050565b611f3c6123a9565b50611f48816004611a1a565b611f87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7e9061459f565b60405180910390fd5b42600582604051611f98919061400a565b9081526020016040518091039020600d0181905550611fb881600a6124d9565b50565b611fc36123a9565b50611fcf816002611a1a565b61200e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200590613fae565b60405180910390fd5b4260058260405161201f919061400a565b9081526020016040518091039020600c018190555061203f8160096124d9565b50565b61204a612ef0565b6120526123a9565b5061205c82610678565b61209b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612092906143ea565b60405180910390fd5b60006005836040516120ad919061400a565b908152602001604051809103902060010154146120ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f690614700565b60405180910390fd5b42600583604051612110919061400a565b90815260200160405180910390206001018190555061212e8261255f565b60058260405161213e919061400a565b9081526020016040518091039020604051806101c00160405290816000820160009054906101000a900460ff16600a81111561217d5761217c613698565b5b600a81111561218f5761218e613698565b5b8152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d820154815250509050919050565b612224612618565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612293576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161228a90614792565b60405180910390fd5b61229c81612696565b50565b6122a7612618565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612316576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230d90614824565b60405180910390fd5b600160149054906101000a900460ff16612365576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235c906148b6565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361243b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243290614824565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661247c612e28565b73ffffffffffffffffffffffffffffffffffffffff16146124d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c990614948565b60405180910390fd5b6001905090565b806005836040516124ea919061400a565b908152602001604051809103902060000160006101000a81548160ff0219169083600a81111561251d5761251c613698565b5b02179055507f10ca3d89184491f5d8de422bd36534abe6eb4b4aa1429a261bdb5ff1dd9ac3868282604051612553929190614977565b60405180910390a15050565b6000600582604051612571919061400a565b908152602001604051809103902060010154141580156125b35750600060058260405161259e919061400a565b90815260200160405180910390206002015414155b156125ee57426005826040516125c9919061400a565b9081526020016040518091039020600401819055506125e98160016124d9565b612615565b426005826040516125ff919061400a565b9081526020016040518091039020600301819055505b50565b612620612e28565b73ffffffffffffffffffffffffffffffffffffffff1661263e6112bf565b73ffffffffffffffffffffffffffffffffffffffff1614612694576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161268b906149f3565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff16036127f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127e790614a5f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603612863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285a90614acb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16036128d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128cd90614b37565b60405180910390fd5b60008160600151511161291e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161291590614ba3565b60405180910390fd5b806020015173ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff1603612994576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161298b90614c0f565b60405180910390fd5b50565b6000816000015160200151146129e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129d990614c7b565b60405180910390fd5b600081606001516020015114612a2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a2490614ce7565b60405180910390fd5b50565b806040015173ffffffffffffffffffffffffffffffffffffffff16826040015173ffffffffffffffffffffffffffffffffffffffff1614612aa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a9d90614d53565b60405180910390fd5b806020015173ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff1614612b1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b1390614dbf565b60405180910390fd5b806000015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1614612b92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b8990614e2b565b60405180910390fd5b80606001515182606001515114612bde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bd590614e97565b60405180910390fd5b60005b826060015151811015612cab5781606001518181518110612c0557612c04614eb7565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1683606001518281518110612c3a57612c39614eb7565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614612c98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c8f90614f32565b60405180910390fd5b8080612ca390614f52565b915050612be1565b505050565b612cc282600001518260000151612e30565b612cd482602001518260200151612e30565b612ce682604001518260400151612e30565b612cf882606001518260600151612e30565b5050565b8060000151826000015114612d46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d3d90614fe6565b60405180910390fd5b8060200151826020015114612d90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d8790615052565b60405180910390fd5b8060400151826040015114612dda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dd1906150be565b60405180910390fd5b8060600151826060015114612e24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e1b9061512a565b60405180910390fd5b5050565b600033905090565b8060000151826000015114612e7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e7190615196565b60405180910390fd5b8060200151826020015114612ec4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ebb90615202565b60405180910390fd5b5050565b6040518060800160405280606081526020016060815260200160608152602001600081525090565b604051806101c001604052806000600a811115612f1057612f0f613698565b5b8152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806080016040528060608152602001612f8b613035565b8152602001612f9861309f565b8152602001612fa56130df565b81525090565b828054828255906000526020600020908101928215613024579160200282015b828111156130235782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612fcb565b5b5090506130319190613107565b5090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b60405180608001604052806130b2613124565b81526020016130bf613124565b81526020016130cc613124565b81526020016130d9613124565b81525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b5b80821115613120576000816000905550600101613108565b5090565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061317d82613152565b9050919050565b61318d81613172565b811461319857600080fd5b50565b6000813590506131aa81613184565b92915050565b6000602082840312156131c6576131c5613148565b5b60006131d48482850161319b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613243578082015181840152602081019050613228565b60008484015250505050565b6000601f19601f8301169050919050565b600061326b82613209565b6132758185613214565b9350613285818560208601613225565b61328e8161324f565b840191505092915050565b60006132a58383613260565b905092915050565b6000602082019050919050565b60006132c5826131dd565b6132cf81856131e8565b9350836020820285016132e1856131f9565b8060005b8581101561331d57848403895281516132fe8582613299565b9450613309836132ad565b925060208a019950506001810190506132e5565b50829750879550505050505092915050565b6000602082019050818103600083015261334981846132ba565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6133938261324f565b810181811067ffffffffffffffff821117156133b2576133b161335b565b5b80604052505050565b60006133c561313e565b90506133d1828261338a565b919050565b600067ffffffffffffffff8211156133f1576133f061335b565b5b6133fa8261324f565b9050602081019050919050565b82818337600083830152505050565b6000613429613424846133d6565b6133bb565b90508281526020810184848401111561344557613444613356565b5b613450848285613407565b509392505050565b600082601f83011261346d5761346c613351565b5b813561347d848260208601613416565b91505092915050565b60006020828403121561349c5761349b613148565b5b600082013567ffffffffffffffff8111156134ba576134b961314d565b5b6134c684828501613458565b91505092915050565b60008115159050919050565b6134e4816134cf565b82525050565b60006020820190506134ff60008301846134db565b92915050565b6000819050919050565b61351881613505565b811461352357600080fd5b50565b6000813590506135358161350f565b92915050565b6000806000806080858703121561355557613554613148565b5b600085013567ffffffffffffffff8111156135735761357261314d565b5b61357f87828801613458565b945050602085013567ffffffffffffffff8111156135a05761359f61314d565b5b6135ac87828801613458565b935050604085013567ffffffffffffffff8111156135cd576135cc61314d565b5b6135d987828801613458565b92505060606135ea87828801613526565b91505092959194509250565b6135ff81613505565b82525050565b600060808301600083015184820360008601526136228282613260565b9150506020830151848203602086015261363c8282613260565b915050604083015184820360408601526136568282613260565b915050606083015161366b60608601826135f6565b508091505092915050565b600060208201905081810360008301526136908184613605565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600b81106136d8576136d7613698565b5b50565b60008190506136e9826136c7565b919050565b60006136f9826136db565b9050919050565b613709816136ee565b82525050565b6101c0820160008201516137266000850182613700565b50602082015161373960208501826135f6565b50604082015161374c60408501826135f6565b50606082015161375f60608501826135f6565b50608082015161377260808501826135f6565b5060a082015161378560a08501826135f6565b5060c082015161379860c08501826135f6565b5060e08201516137ab60e08501826135f6565b506101008201516137c06101008501826135f6565b506101208201516137d56101208501826135f6565b506101408201516137ea6101408501826135f6565b506101608201516137ff6101608501826135f6565b506101808201516138146101808501826135f6565b506101a08201516138296101a08501826135f6565b50505050565b60006101c082019050613845600083018461370f565b92915050565b61385481613505565b82525050565b600060208201905061386f600083018461384b565b92915050565b61387e81613172565b82525050565b60006020820190506138996000830184613875565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156138c4576138c361335b565b5b602082029050602081019050919050565b600080fd5b60006138ed6138e8846138a9565b6133bb565b905080838252602082019050602084028301858111156139105761390f6138d5565b5b835b818110156139395780613925888261319b565b845260208401935050602081019050613912565b5050509392505050565b600082601f83011261395857613957613351565b5b81356139688482602086016138da565b91505092915050565b6000608082840312156139875761398661389f565b5b61399160806133bb565b905060006139a18482850161319b565b60008301525060206139b58482850161319b565b60208301525060406139c98482850161319b565b604083015250606082013567ffffffffffffffff8111156139ed576139ec6138a4565b5b6139f984828501613943565b60608301525092915050565b600060408284031215613a1b57613a1a61389f565b5b613a2560406133bb565b90506000613a3584828501613526565b6000830152506020613a4984828501613526565b60208301525092915050565b60006101008284031215613a6c57613a6b61389f565b5b613a7660806133bb565b90506000613a8684828501613a05565b6000830152506040613a9a84828501613a05565b6020830152506080613aae84828501613a05565b60408301525060c0613ac284828501613a05565b60608301525092915050565b600060808284031215613ae457613ae361389f565b5b613aee60806133bb565b90506000613afe84828501613526565b6000830152506020613b1284828501613526565b6020830152506040613b2684828501613526565b6040830152506060613b3a84828501613526565b60608301525092915050565b6000806000806101c08587031215613b6157613b60613148565b5b600085013567ffffffffffffffff811115613b7f57613b7e61314d565b5b613b8b87828801613458565b945050602085013567ffffffffffffffff811115613bac57613bab61314d565b5b613bb887828801613971565b9350506040613bc987828801613a55565b925050610140613bdb87828801613ace565b91505092959194509250565b613bf081613172565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613c2e8383613be7565b60208301905092915050565b6000602082019050919050565b6000613c5282613bf6565b613c5c8185613c01565b9350613c6783613c12565b8060005b83811015613c98578151613c7f8882613c22565b9750613c8a83613c3a565b925050600181019050613c6b565b5085935050505092915050565b6000608083016000830151613cbd6000860182613be7565b506020830151613cd06020860182613be7565b506040830151613ce36040860182613be7565b5060608301518482036060860152613cfb8282613c47565b9150508091505092915050565b604082016000820151613d1e60008501826135f6565b506020820151613d3160208501826135f6565b50505050565b61010082016000820151613d4e6000850182613d08565b506020820151613d616040850182613d08565b506040820151613d746080850182613d08565b506060820151613d8760c0850182613d08565b50505050565b608082016000820151613da360008501826135f6565b506020820151613db660208501826135f6565b506040820151613dc960408501826135f6565b506060820151613ddc60608501826135f6565b50505050565b60006101c0830160008301518482036000860152613e008282613260565b91505060208301518482036020860152613e1a8282613ca5565b9150506040830151613e2f6040860182613d37565b506060830151613e43610140860182613d8d565b508091505092915050565b60006020820190508181036000830152613e688184613de2565b905092915050565b600b8110613e7d57600080fd5b50565b600081359050613e8f81613e70565b92915050565b60008060408385031215613eac57613eab613148565b5b600083013567ffffffffffffffff811115613eca57613ec961314d565b5b613ed685828601613458565b9250506020613ee785828601613e80565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613f3857607f821691505b602082108103613f4b57613f4a613ef1565b5b50919050565b600082825260208201905092915050565b7f526573756c74735375626d697474656400000000000000000000000000000000600082015250565b6000613f98601083613f51565b9150613fa382613f62565b602082019050919050565b60006020820190508181036000830152613fc781613f8b565b9050919050565b600081905092915050565b6000613fe482613209565b613fee8185613fce565b9350613ffe818560208601613225565b80840191505092915050565b60006140168284613fd9565b915081905092915050565b7f4465616c41677265656400000000000000000000000000000000000000000000600082015250565b6000614057600a83613f51565b915061406282614021565b602082019050919050565b600060208201905081810360008301526140868161404a565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026140ef7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826140b2565b6140f986836140b2565b95508019841693508086168417925050509392505050565b6000819050919050565b600061413661413161412c84613505565b614111565b613505565b9050919050565b6000819050919050565b6141508361411b565b61416461415c8261413d565b8484546140bf565b825550505050565b600090565b61417961416c565b614184818484614147565b505050565b5b818110156141a85761419d600082614171565b60018101905061418a565b5050565b601f8211156141ed576141be8161408d565b6141c7846140a2565b810160208510156141d6578190505b6141ea6141e2856140a2565b830182614189565b50505b505050565b600082821c905092915050565b6000614210600019846008026141f2565b1980831691505092915050565b600061422983836141ff565b9150826002028217905092915050565b61424282613209565b67ffffffffffffffff81111561425b5761425a61335b565b5b6142658254613f20565b6142708282856141ac565b600060209050601f8311600181146142a35760008415614291578287015190505b61429b858261421d565b865550614303565b601f1984166142b18661408d565b60005b828110156142d9578489015182556001820191506020850194506020810190506142b4565b868310156142f657848901516142f2601f8916826141ff565b8355505b6001600288020188555050505b505050505050565b600061431682613209565b6143208185613f51565b9350614330818560208601613225565b6143398161324f565b840191505092915050565b6000608082019050818103600083015261435e818761430b565b90508181036020830152614372818661430b565b90508181036040830152614386818561430b565b9050614395606083018461384b565b95945050505050565b7f4465616c20646f6573206e6f7420657869737400000000000000000000000000600082015250565b60006143d4601383613f51565b91506143df8261439e565b602082019050919050565b60006020820190508181036000830152614403816143c7565b9050919050565b7f4a432068617320616c7265616479206167726565640000000000000000000000600082015250565b6000614440601583613f51565b915061444b8261440a565b602082019050919050565b6000602082019050818103600083015261446f81614433565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006144b082613505565b91506144bb83613505565b92508282026144c981613505565b915082820484148315176144e0576144df614476565b5b5092915050565b7f4465616c4e65676f74696174696e670000000000000000000000000000000000600082015250565b600061451d600f83613f51565b9150614528826144e7565b602082019050919050565b6000602082019050818103600083015261454c81614510565b9050919050565b7f526573756c7473436865636b6564000000000000000000000000000000000000600082015250565b6000614589600e83613f51565b915061459482614553565b602082019050919050565b600060208201905081810360008301526145b88161457c565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061461b602e83613f51565b9150614626826145bf565b604082019050919050565b6000602082019050818103600083015261464a8161460e565b9050919050565b6000819050919050565b600060ff82169050919050565b600061468361467e61467984614651565b614111565b61465b565b9050919050565b61469381614668565b82525050565b60006020820190506146ae600083018461468a565b92915050565b7f52502068617320616c7265616479206167726565640000000000000000000000600082015250565b60006146ea601583613f51565b91506146f5826146b4565b602082019050919050565b60006020820190508181036000830152614719816146dd565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061477c602683613f51565b915061478782614720565b604082019050919050565b600060208201905081810360008301526147ab8161476f565b9050919050565b7f436f6e74726f6c6c65724f776e61626c653a20436f6e74726f6c6c657220616460008201527f6472657373206d75737420626520646566696e65640000000000000000000000602082015250565b600061480e603583613f51565b9150614819826147b2565b604082019050919050565b6000602082019050818103600083015261483d81614801565b9050919050565b7f436f6e74726f6c6c65724f776e61626c653a2063616e4368616e6765436f6e7460008201527f726f6c6c6572416464726573732069732064697361626c656400000000000000602082015250565b60006148a0603983613f51565b91506148ab82614844565b604082019050919050565b600060208201905081810360008301526148cf81614893565b9050919050565b7f436f6e74726f6c6c65724f776e61626c653a204f6e6c792074686520636f6e7460008201527f726f6c6c65722063616e2063616c6c2074686973206d6574686f640000000000602082015250565b6000614932603b83613f51565b915061493d826148d6565b604082019050919050565b6000602082019050818103600083015261496181614925565b9050919050565b614971816136ee565b82525050565b60006040820190508181036000830152614991818561430b565b90506149a06020830184614968565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006149dd602083613f51565b91506149e8826149a7565b602082019050919050565b60006020820190508181036000830152614a0c816149d0565b9050919050565b7f5250206d697373696e6700000000000000000000000000000000000000000000600082015250565b6000614a49600a83613f51565b9150614a5482614a13565b602082019050919050565b60006020820190508181036000830152614a7881614a3c565b9050919050565b7f4a43206d697373696e6700000000000000000000000000000000000000000000600082015250565b6000614ab5600a83613f51565b9150614ac082614a7f565b602082019050919050565b60006020820190508181036000830152614ae481614aa8565b9050919050565b7f536f6c766572206d697373696e67000000000000000000000000000000000000600082015250565b6000614b21600e83613f51565b9150614b2c82614aeb565b602082019050919050565b60006020820190508181036000830152614b5081614b14565b9050919050565b7f4d65646961746f7273203c3d2030000000000000000000000000000000000000600082015250565b6000614b8d600e83613f51565b9150614b9882614b57565b602082019050919050565b60006020820190508181036000830152614bbc81614b80565b9050919050565b7f5250202f204a432073616d650000000000000000000000000000000000000000600082015250565b6000614bf9600c83613f51565b9150614c0482614bc3565b602082019050919050565b60006020820190508181036000830152614c2881614bec565b9050919050565b7f4167726565206465706f736974206d7573742062652030000000000000000000600082015250565b6000614c65601783613f51565b9150614c7082614c2f565b602082019050919050565b60006020820190508181036000830152614c9481614c58565b9050919050565b7f4d656469617465206465706f736974206d757374206265203000000000000000600082015250565b6000614cd1601983613f51565b9150614cdc82614c9b565b602082019050919050565b60006020820190508181036000830152614d0081614cc4565b9050919050565b7f5250000000000000000000000000000000000000000000000000000000000000600082015250565b6000614d3d600283613f51565b9150614d4882614d07565b602082019050919050565b60006020820190508181036000830152614d6c81614d30565b9050919050565b7f4a43000000000000000000000000000000000000000000000000000000000000600082015250565b6000614da9600283613f51565b9150614db482614d73565b602082019050919050565b60006020820190508181036000830152614dd881614d9c565b9050919050565b7f536f6c7665720000000000000000000000000000000000000000000000000000600082015250565b6000614e15600683613f51565b9150614e2082614ddf565b602082019050919050565b60006020820190508181036000830152614e4481614e08565b9050919050565b7f4d65646961746f72730000000000000000000000000000000000000000000000600082015250565b6000614e81600983613f51565b9150614e8c82614e4b565b602082019050919050565b60006020820190508181036000830152614eb081614e74565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4d65646961746f72000000000000000000000000000000000000000000000000600082015250565b6000614f1c600883613f51565b9150614f2782614ee6565b602082019050919050565b60006020820190508181036000830152614f4b81614f0f565b9050919050565b6000614f5d82613505565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614f8f57614f8e614476565b5b600182019050919050565b7f5072696365000000000000000000000000000000000000000000000000000000600082015250565b6000614fd0600583613f51565b9150614fdb82614f9a565b602082019050919050565b60006020820190508181036000830152614fff81614fc3565b9050919050565b7f5061796d656e7400000000000000000000000000000000000000000000000000600082015250565b600061503c600783613f51565b915061504782615006565b602082019050919050565b6000602082019050818103600083015261506b8161502f565b9050919050565b7f526573756c747300000000000000000000000000000000000000000000000000600082015250565b60006150a8600783613f51565b91506150b382615072565b602082019050919050565b600060208201905081810360008301526150d78161509b565b9050919050565b7f4d6564696174696f6e0000000000000000000000000000000000000000000000600082015250565b6000615114600983613f51565b915061511f826150de565b602082019050919050565b6000602082019050818103600083015261514381615107565b9050919050565b7f54696d656f757400000000000000000000000000000000000000000000000000600082015250565b6000615180600783613f51565b915061518b8261514a565b602082019050919050565b600060208201905081810360008301526151af81615173565b9050919050565b7f436f6c6c61746572616c00000000000000000000000000000000000000000000600082015250565b60006151ec600a83613f51565b91506151f7826151b6565b602082019050919050565b6000602082019050818103600083015261521b816151df565b905091905056fea2646970667358221220e2c6272dbfdf7b441eeac1e13b70ab2d78786827e0439263ea599f783e458e8364736f6c63430008150033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptResult(string)": {
        "notice": "Judge Results"
      },
      "getAgreement(string)": {
        "notice": "Agreements"
      },
      "getDeal(string)": {
        "notice": "Deals"
      },
      "getJobCost(string)": {
        "notice": "Costings"
      },
      "getResult(string)": {
        "notice": "Post Results"
      },
      "hasDeal(string)": {
        "notice": "Checkers"
      },
      "initialize()": {
        "notice": "Init"
      },
      "mediationAcceptResult(string)": {
        "notice": "Mediati:"
      },
      "timeoutAgree(string)": {
        "notice": "Timeouts"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 506,
        "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1475,
        "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
        "label": "controllerAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1478,
        "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
        "label": "canChangeControllerAddress",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 6,
        "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
        "label": "_initialized",
        "offset": 21,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
        "label": "_initializing",
        "offset": 22,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 3933,
        "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
        "label": "controllerAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3936,
        "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
        "label": "canChangeControllerAddress",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 3941,
        "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
        "label": "deals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Deal)6394_storage)"
      },
      {
        "astId": 3946,
        "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
        "label": "dealsForParty",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 3951,
        "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
        "label": "agreements",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Agreement)6433_storage)"
      },
      {
        "astId": 3956,
        "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
        "label": "results",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Result)6403_storage)"
      },
      {
        "astId": 3961,
        "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
        "label": "mediations",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Result)6403_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(AgreementState)6334": {
        "encoding": "inplace",
        "label": "enum SharedStructs.AgreementState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Agreement)6433_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct SharedStructs.Agreement)",
        "numberOfBytes": "32",
        "value": "t_struct(Agreement)6433_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Deal)6394_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct SharedStructs.Deal)",
        "numberOfBytes": "32",
        "value": "t_struct(Deal)6394_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Result)6403_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct SharedStructs.Result)",
        "numberOfBytes": "32",
        "value": "t_struct(Result)6403_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Agreement)6433_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.Agreement",
        "members": [
          {
            "astId": 6406,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(AgreementState)6334"
          },
          {
            "astId": 6408,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "resourceProviderAgreedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6410,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "jobCreatorAgreedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6412,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "dealCreatedAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6414,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "dealAgreedAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6416,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "resultsSubmittedAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6418,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "resultsAcceptedAt",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6420,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "resultsCheckedAt",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6422,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "mediationAcceptedAt",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 6424,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "mediationRejectedAt",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 6426,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "timeoutAgreeAt",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 6428,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "timeoutSubmitResultsAt",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 6430,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "timeoutJudgeResultsAt",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 6432,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "timeoutMediateResultsAt",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(Deal)6394_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.Deal",
        "members": [
          {
            "astId": 6384,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "dealId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 6387,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "members",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(DealMembers)6355_storage"
          },
          {
            "astId": 6390,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "timeouts",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(DealTimeouts)6373_storage"
          },
          {
            "astId": 6393,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "pricing",
            "offset": 0,
            "slot": "13",
            "type": "t_struct(DealPricing)6382_storage"
          }
        ],
        "numberOfBytes": "544"
      },
      "t_struct(DealMembers)6355_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.DealMembers",
        "members": [
          {
            "astId": 6347,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "solver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6349,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "jobCreator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6351,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "resourceProvider",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6354,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "mediators",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(DealPricing)6382_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.DealPricing",
        "members": [
          {
            "astId": 6375,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "instructionPrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6377,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "paymentCollateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6379,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "resultsCollateralMultiple",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6381,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "mediationFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(DealTimeout)6360_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.DealTimeout",
        "members": [
          {
            "astId": 6357,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "timeout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6359,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "collateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DealTimeouts)6373_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.DealTimeouts",
        "members": [
          {
            "astId": 6363,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "agree",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(DealTimeout)6360_storage"
          },
          {
            "astId": 6366,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "submitResults",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(DealTimeout)6360_storage"
          },
          {
            "astId": 6369,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "judgeResults",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(DealTimeout)6360_storage"
          },
          {
            "astId": 6372,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "mediateResults",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(DealTimeout)6360_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Result)6403_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.Result",
        "members": [
          {
            "astId": 6396,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "dealId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 6398,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "resultsId",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 6400,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "dataId",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 6402,
            "contract": "contracts/CoopHiveStorage.sol:CoopHiveStorage",
            "label": "instructionCount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}